---
title: "Manual curation trials - the lost final TEs"
date: 2025-08-07
execute:
  warning: false
format:
  html:
    self-contained: true
    fig-height: 12
    fig-width: 12
    fig-format: png
    fig-dpi: 300
---


# Comparing results of different TEammo curators
When I did this I found that my curated final libraries where much smaller, ~ 50 %
Though I had in error removed sequences during the final library review, this problem remains
Now we will just focus on one - D.tristis to look at exactly why the two libs are different

## Run BLASTs between curated libraries

```{bash}
#| output: false
#| eval: false
# Prepare folders and files for running pre-TEammo steps
data="data_lost"
csv_file="species_strains.csv"
scripts/prep_for_TEammo.sh ${data} ${csv_file}

# Then run MCHelper and TEaid (the sbatch parames are added for SLURM)
while read line; do sed 's/; /; sbatch --cpus-per-task=8 --mem-per-cpu=6GB --partition=normal /1' $f; done < batch_run_mchelper_data_lost.sh | bash
# Once done do:
while read line; do sed 's/; /; sbatch --cpus-per-task=8 --mem-per-cpu=6GB --partition=normal /1' $f; done < batch_run_mchelper_teaid_data_lost.sh | bash
```

# Then do manual curation
* Need ssh with: `ssh -L 3001:localhost:3001 user@server`
* Go to TEammo: `cd <your path to TEammo>/TEammo`
* Remove previous linked data if needed: `rm -f data`
* Link your data: `ln -s ~/projects/mctrials/data_lost data`
* Run TEammo: `nohup Rscript TEammo_app.R > teammo.log 2>&1 &` (Use srun on SLURM! `srun --cpus-per-task=8 --pty bash; Rscript TEammo_app.R > teammo.log 2>&1 &`)
* You can watch the log file without constantly doing `cat teammo.log` with: `less +F teammo.log`
* Then curate!
* In case a process was not cancelled properly and it is stilling running: `lsof -i :3001`, then stop the process with: `kill -9 <pid>`


# Then run scripts to compare curations 1 and 2 (1 is the one you just did)
```{bash}
data="data_lost"
csv_file="species_strains.csv"
conda activate bioinf
while IFS=, read -r species strain genome_path rm2_library_path curation2_final_lib busco_lib curation1 curation2; do
    [[ -z "$species" || "$species" == \#* ]] && continue
    scripts/lib_compare.sh \
      ${data}/MCH_output/${species}/${strain}/${species}_${strain}_curated-TE-library.fa \
      ${curation1} \
      ${curation2_final_lib} \
      ${curation2} \
      ${species} \
      ${strain} \
      ${rm2_library_path} \
      ${data}/MCH_output/${species}/${strain}/curated_sequences_NR.fa
done < "$csv_file"

```



## Load and overall comparisons

```{r}
#| output: false
#| eval: false
install.packages('BiocManager')
install.packages('plotly')
install.packages('dplyr')
install.packages('ggplot2')
install.packages('tidyr')
install.packages('seqinr')
install.packages('forcats')
install.packages('gt')
BiocManager::install("Biostrings")
install.packages('patchwork')
```

```{r}
#| output: false
#setwd("/home/csic/gcy/jgp/extra_storage/dean/mctrials/mctrials")
source("scripts/mccompare_functions.R")

library(plotly)
library(dplyr)
library(ggplot2)
#library(BiocParallel)
library(Biostrings)
library(tidyr)
library(seqinr)
library(patchwork)
library(forcats)
library(gt)
```

```{r}
#| output: false

# Color schemes

palette_seq_match <- c(
  "Missing from query lib" = "black",                     
  "Missing from subject lib" = "grey50",                  
  "Present, <70" = RColorBrewer::brewer.pal(2, "YlGn")[2],
  "Present, 70" = RColorBrewer::brewer.pal(3, "YlGn")[3],
  "Present, 80" = RColorBrewer::brewer.pal(4, "YlGn")[4],
  "Perfect, 95-100" = RColorBrewer::brewer.pal(5, "YlGn")[5]
)

# Load the TE classifications
teClassification <- read.table("orozco_classification-2024_mchelper.csv", sep = ";", header = TRUE)
teClassification <- teClassification %>%
  mutate(AppName = paste(Class, Order, Superfamily, sep ="/") %>% sub("/$", "", .) %>% sub("/$", "", .))
teClassification <- rbind(
  teClassification
  , c("", "Unclassified", "", "Unclassified")
)

# Load libraries to compare

df <- read.csv("species_strains.csv", header = FALSE, comment.char = "#")
data <- "data_lost"

# Assign correct column names
colnames(df) <- c("species", "strain", "genome_path", "rm2_library_path",
                  "curation2_final_lib", "busco_lib", "curation1", "curation2")

# Add a new column with the constructed curated path
df$curation1_final_lib <- file.path(
  data, "MCH_output",
  df$species,
  df$strain,
  paste0(df$species, "_", df$strain, "_curated-TE-library.fa")
)

df$curation1_names_relation <- file.path(
  data, "MCH_output",
  df$species,
  df$strain, "MCH_final",
  paste0(df$species, "_", df$strain, "_TE-names-relation.tsv")
)

# For final libs
#  For the curation2 previous ones
read_te_wrapper <- function(row) {
  teReadLib(
    row[["curation2_final_lib"]],
    libIdentifier = row[["curation2"]],
    species      = row[["species"]],
    strain       = row[["strain"]]
  )
}
# Apply row by row
final_libs_c1 <- apply(df, 1, function(r) read_te_wrapper(as.list(r)))
# Give each element a clear name, e.g. species_curator
names(final_libs_c1) <- paste(df$species, df$curation2, sep = "_")

#  For the my curations curation1
read_te_wrapper <- function(row) {
  teReadLib(
    row[["curation1_final_lib"]],
    libIdentifier = row[["curation1"]],
    species      = row[["species"]],
    strain       = row[["strain"]]
  )
}
# Apply row by row
final_libs_c2 <- apply(df, 1, function(r) read_te_wrapper(as.list(r)))
# Give each element a clear name, e.g. species_curator
names(final_libs_c2) <- paste(df$species, df$curation1, sep = "_")

final_libs <- c(final_libs_c1, final_libs_c2)


```

# Load BLAST results


```{r}


LoadBlastComparison_wrapper <- function(row) {
  query_name   <- paste(row[["species"]], row[["curation1"]], sep = "_")
  subject_name <- paste(row[["species"]], row[["curation2"]], sep = "_")
  
  if(!query_name %in% names(final_libs)) stop(paste("Query not found:", query_name))
  if(!subject_name %in% names(final_libs)) stop(paste("Subject not found:", subject_name))
  
  LoadBlastComparison(
    blast_out = paste0("results/lib_compare/", row[["species"]], "_", row[["strain"]], "_", row[["curation1"]], "_vs_", row[["curation2"]], ".blast.out"),
    blast_query_lib   = final_libs[[query_name]],
    blast_subject_lib = final_libs[[subject_name]],
    species = row[["species"]],
    strain  = row[["strain"]],
    comparison = paste(row[["curation1"]], row[["curation2"]], sep = "_vs_")
  )
}

# For blast curator 1 (you) vs curator 2 (previous)
blasts_c1_vs_c2 <- apply(df, 1, function(r) LoadBlastComparison_wrapper(as.list(r)))
# Give each element a clear name, e.g. species_curator
names(blasts_c1_vs_c2) <- paste(df$species, df$curation1, "vs", df$curation2, sep = "_")

# For blast curator 2 (previous) vs curator 1 (you)
blasts_c2_vs_c1 <- apply(df, 1, function(r) LoadBlastComparison_wrapper(as.list(r)))
# Give each element a clear name, e.g. species_curator
names(blasts_c2_vs_c1) <- paste(df$species, df$curation2, "vs", df$curation1, sep = "_")


# D.merina
#blast_Dmer_dean_vs_marta <- LoadBlastComparison(
#  blast_out = "results/lib_compare/D.merina_NA_dean_vs_marta.blast.out",
#  blast_query_lib = lib_Dmer_dean,
#  blast_subject_lib = lib_Dmer_marta,
#  species = "D.merina",
#  strain = "NA",
#  comparison = "dean_vs_marta")

#blast_Dmer_marta_vs_dean <- LoadBlastComparison(
#  blast_out = "results/lib_compare/D.merina_NA_marta_vs_dean.blast.out",
#  blast_query_lib = lib_Dmer_marta,
#  blast_subject_lib = lib_Dmer_dean,
#  species = "D.merina",
#  strain = "NA",
#  comparison = "marta_vs_dean")

# Repeat for blast vs MCH auto libs
LoadBlastComparison_wrapper <- function(row) {
  query_name   <- paste(row[["species"]], row[["curation2"]], sep = "_")
  
  if(!query_name %in% names(final_libs)) stop(paste("Query not found:", query_name))
  # We set query and subject lib as the same jsut to dupe the function as we dont need both
  LoadBlastComparison(
    blast_out = paste0("results/lib_compare/", row[["species"]], "_", row[["strain"]], "_", row[["curation2"]], "_vs_", "MCHelperAuto", ".blast.out"),
    blast_query_lib   = final_libs[[query_name]],
    blast_subject_lib = final_libs[[query_name]],
    species = row[["species"]],
    strain  = row[["strain"]],
    comparison = paste(row[["curation2"]], "MCHelperAuto", sep = "_vs_")
  )
}

# For blast curator 2 (previous) vs MCH auto library
blasts_c2_vs_MCHelperAuto <- apply(df, 1, function(r) LoadBlastComparison_wrapper(as.list(r)))
names(blasts_c2_vs_MCHelperAuto) <- paste(df$species, df$curation2, "vs_MCHelperAuto", sep = "_")

# D.merina
#blast_Dmer_marta_vs_MCH <- LoadBlastComparison(
#  blast_out = "results/lib_compare/D.merina_NA_marta_vs_MCHelperAuto.blast.out",
#  blast_query_lib = lib_Dmer_marta,
#  blast_subject_lib = lib_Dmer_MCH,
#  species = "D.merina",
#  strain = "NA",
# comparison = "marta_vs_MCH")

```

# Curation vs curation composition
Three controls included to check that workflow is comparing libraries properly: D.planitibia duplicate, with the same library comapred to itself: unchanged, with 7 LINE/LOAs removed, and 17 LTR/BelPaos added from D.tristis

TE query library (current curator, Dean) vs subject library (previous curator, Marta) by BLASTn hit totals (A), percent by TE classification (B), and by total quantites of TE consensuses missing from the query library (C), also shown as classification None/None/None in A & B. BLASTn hits of TE consensus library categorised by BLAST percent identity (pident): Perfect, 95-100 %; Present 80, 80-94 %; Present 70, 70-79 %; Missing, 69 % > - subdivided by missing from query or subject library

::: {.panel-tabset}

### D.planitibia - sanity test 1 vs self
Simply comparing a curated library against itself
âœ… Dpla vs itself plots a perfect library
```{r}
tePlotLib(list(final_libs$D.planitibia_dean, final_libs$D.planitibia_dean_same))
```

```{r}
PlotBlastBarMatches(blasts_c1_vs_c2$D.planitibia_dean_vs_dean_same)
```

### D.planitibia - sanity test 2 vs self with removed TEs
Comparing a curated library against itself with 4 LINE/LOA TEs, 1 LINE, and 1 TIR/TC1-MARINER removed
âœ… Show TEs expected to be missing plotted
```{r}
tePlotLib(list(final_libs$D.planitibia_dean, final_libs$D.planitibia_dean_test_removed_LOAs))
```

```{r}
PlotBlastBarMatches(blasts_c1_vs_c2$D.planitibia_dean_vs_dean_test_removed_LOAs)
```

### D.planitibia - sanity test 2 vs self with added TEs
Comparing a curated library against itself with 17 LTR/BELPAO TEs added from D.tristis
âœ… Show TEs expected to be added plotted
```{r}
tePlotLib(list(final_libs$D.planitibia_dean, final_libs$D.planitibia_dean_test_added_PAOs))
```

```{r}
PlotBlastBarMatches(blasts_c1_vs_c2$D.planitibia_dean_vs_dean_test_added_PAOs)
```


### D.santomea
```{r}
tePlotLib(list(final_libs$D.santomea_dean, final_libs$D.santomea_RM2))
```

```{r}
PlotBlastBarMatches(blasts_c1_vs_c2$D.santomea_dean_vs_RM2)
```

### D.tristis
```{r}
tePlotLib(list(final_libs$D.tristis_dean, final_libs$D.tristis_RM2))
```

```{r}
PlotBlastBarMatches(blasts_c1_vs_c2$D.tristis_dean_vs_RM2)
```

### D.birchii  (35 party - Albert)
**Assessment of previous curation**:  
**Missing from me (5):**  
* I missed 1-2 MITEs (one has patchy coverage and low FLF)
* 3-4 solo LTRs
**Missing from previous (5):**  
* TRIMS: 1, but FLF = 1 and patchy coverage
* LTRs (fragments): 1, should have discarded
* Helitrons (with HEL domains): 2
* LTRs (long/full but with chimerism and low FLF): 1

```{r}
tePlotLib(list(final_libs$D.birchii_dean, final_libs$D.birchii_albert))
```

```{r}
PlotBlastBarMatches(blasts_c1_vs_c2$D.birchii_dean_vs_albert)
SummariseBlastBarMatches(blasts_c1_vs_c2$D.birchii_dean_vs_albert)
```

### D.neocordata (35 party)
**Assessment of previous curation**:  
**Missing from me (4):**  
* TIRs (Full length with TIRs): 1
* LINEs (short fragment): 1
* Chimera LTR/TIR fragment (should be discarded): 1
* MITE (maybe has short/no TIRs?): 1
**Missing from previous (10):**  
4 are duplicates of other consensus, so only 10 models are retrieved to inspect
* LTRs (Fragment that should be discarded): 5
* LTRs (Full length/domains, but imperfect LTRs): 3
* TIRs (with Tase but with bad/missing TIRs): 1
* LINEs (fragment with low FLF should be discarded): 1
Everything I kept should be discarded in this category

```{r}
tePlotLib(list(final_libs$D.neocordata_dean, final_libs$D.neocordata_giannis))
```

```{r}
PlotBlastBarMatches(blasts_c1_vs_c2$D.neocordata_dean_vs_giannis)
```

### D.planitibia (35 party - Marta)
**Assessment of previous curation**:  
**Missing from me (3):**  
* Helitron without domain: 1
* MITE: 1
* Short LINE fragment: 1

**Missing from previous (2):**  
* Helitron without domain: 1
* LARD: 1

```{r}
tePlotLib(list(final_libs$D.planitibia_dean, final_libs$D.planitibia_marta))
```

```{r}
PlotBlastBarMatches(blasts_c1_vs_c2$D.planitibia_dean_vs_marta)
```

### D.willistoni (35 party - Simon)
**Assessment of previous curation**:  
**Missing from me (24):**  
* LTRs (solo LTR): 4
* LTRs (Full length/domains, lacking domains): 2
* LTRs (Fragment that should be discarded): 2
* A helitron fragment with no HEL domains: 2
* LTRs (Full length/domains, but imperfect LTRs and/or low FLF): 1
* LINEs (has domains, but low FLF, bad coverage): 1
* TIRs (has Tase, but no/imperfect TIRs): 1
Everything I missed that Simon kept should not be kept

**Missing from previous (16):**  
* MITEs (with TIRs, no domains, but low FLF and/or patchy coverage): 7
* A helitron fragment with HEL domains: 4
* TIRs (has Tase but no/imperfect TIRs, low FLF): 4
* LTRs (Fragment that should be discarded): 3
* LINEs (fragment): 3
* LTRs (solo LTR): 2
* LTRs (Full length/domains, but imperfect LTRs and/or low FLF): 1
* MITEs (good): 1
* LINEs (full length with domains but simple repeat region, low flf): 1
* TIRs (has Tase and TIRs but simple repeats, low FLF): 1
What is missing is all ok (i.e. I should have discarded), but the helitron fragments are perhaps an important difference?

Overall, my curation and the previous have retained a small portion of low quality TEs, and these subset is not found in the other. Neither curation rounds have discarded good TEs that the other kept.  
Perhaps, the helitron fragment difference is important

```{r}
tePlotLib(list(final_libs$D.willistoni_dean, final_libs$D.willistoni_simon))
```

```{r}
PlotBlastBarMatches(blasts_c1_vs_c2$D.willistoni_dean_vs_simon)
SummariseBlastBarMatches(blasts_c1_vs_c2$D.willistoni_dean_vs_simon)
```

:::


# Extract and examine TEs not shared between libraries
```{r}

GetMissingTEs_wrapper <- function(row) {
  blast_out_name1   <- paste(row[["species"]], row[["curation1"]], "vs", row[["curation2"]], sep = "_")
  blast_out_name2   <- paste(row[["species"]], row[["curation2"]], "vs", row[["curation1"]], sep = "_")
  blast_out_name2MCH   <- paste(row[["species"]], row[["curation2"]], "vs", "MCHelperAuto", sep = "_")

  GetMissingTEs(
    genome_name = row[["species"]],
    names_relate_file_Query = row[["curation1_names_relation"]],
    blast_Genome_Lib1_vs_Lib2 = blasts_c1_vs_c2[[blast_out_name1]],
    blast_Genome_Lib2_vs_Lib1 = blasts_c2_vs_c1[[blast_out_name2]],
    blast_Genome_Lib2_vs_MCH = blasts_c2_vs_MCHelperAuto[[blast_out_name2MCH]],
    lib1_name = row[["curation1"]],
    lib2_name = row[["curation2"]])

}

apply(df, 1, function(r) GetMissingTEs_wrapper(as.list(r)))

```

# The fate of the missing TEs
This turned out to be a bug in TEammo that was not adding the 808080 models that were new families to the database
* My final lib was 49 vs Marta's 139 for this genome - of these 90 lost TEs:
  * 60 ended up in teNon80Lib - "complete_non808080.fa"
  * 2 ended up in teStandbyLib - presumably the 707070 bug meant they were not added
  * 28 ended up in teIncompleteModelsLib - "incomplete_non808080.fa"

## All the final lib seqs in Marta library are in the MCHelper library
This was to figure out why my libraries were so small at the start of mctrials - this turned out to be a bug which Adrian then fixed
All 139 have a blast hit 95-100% hit vs the MCHelper library
```{r}
length(lib_Dtri_marta)
length(unique(blast_Dtri_marta_vs_MCH$qseqid))

as.data.frame(table(blast_Dtri_marta_vs_MCH$seq_match))
```

## Did I discard them manually?
* 5 discarded in the first MI - they are in the discarded_sequences.fa so this was my manual inspection
* 28 discarded in the 808080 step
* 9 discarded in the Incomplete module
* 42 in total were discarded, leaving 48 removed somewhere else?

## Total seqs discarded?
* 57 in 808080
* 170 in incomplete
* 67 in first MI


## Curation of the lost seqs quick version
With MCHelper T module, you can just inspect the pdfs of from TEaid without importing in TEammo
We have to rerun these because whilst TEammo has pdf outputs from this, it seems to overwrite them, because the plots are empty
Then look at the plots from te aid to see what was missing and assess if it is ok, e.g.:  
output/quick_lost_check/D.birchii/missing_from_Lib1_dean/te_aid/rnd-1_family-401_s_1.fa.c2g.pdf

### Sanity tests
The D.planitbia duplicates against themselves all make sense - sequences added to the TEs by homology to database cannot be inspected as they are from the common database

Beware of duplicates in the common database, because they will be added without redundancy affecting them - if you curate the same genome twice with the same name, it will add sequences with the same names to your final library!

If running a curation again, do `rm -fr output/quick_lost_check` before (or specify genome folder to avoid rerunning it again for many genomes) :

```{bash}
data="data_lost"
csv_file="$(realpath species_strains.csv)"
# Then run scripts to compare curations 1 and 2 (1 is the one you just did)
# Regex used to account for changes in classificaitns during manual curation
while IFS=, read -r species strain genome_path rm2_library_path curation2_final_lib busco_lib curation1 curation2; do
    [[ -z "$species" || "$species" == \#* ]] && continue
    workdir="output/quick_lost_check/${species}"
    mkdir -p ${workdir}
    cd ${workdir}
    conda activate bioinf
    sed 's/#.*/#\.\*/g' "../../../results/missing_from_Lib1_${curation1}_${species}.csv" |\
    seqkit grep --threads 4 -r -n -f - "../../../${data}/MCH_output/${species}/${strain}/curated_sequences_NR.fa" > missing_from_Lib1_${curation1}_${species}.fa

    sed 's/#.*/#\.\*/g' "../../../results/missing_from_Lib2_${curation2}_${species}.csv" |\
    seqkit grep --threads 4 -r -n -f - "../../../${data}/MCH_output/${species}/${strain}/curated_sequences_NR.fa" > missing_from_Lib2_${curation2}_${species}.fa

    conda activate MCHelper
    python3 $(which MCHelper.py) \
      -r T \
      --input_type fasta \
      -l missing_from_Lib1_${curation1}_${species}.fa \
      -g ${genome_path} \
      -o missing_from_Lib1_${curation1} \
      -t ${SLURM_CPUS_PER_TASK:-4} \
      -v Y

    python3 $(which MCHelper.py) \
      -r T \
      --input_type fasta \
      -l missing_from_Lib2_${curation2}_${species}.fa \
      -g ${genome_path} \
      -o missing_from_Lib2_${curation2} \
      -t ${SLURM_CPUS_PER_TASK:-4} \
      -v Y
    cd ../../..
done < "$csv_file"

```

